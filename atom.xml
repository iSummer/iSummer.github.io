<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Isummer&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-07-30T07:26:51.042Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Wu Peng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用SDK驱动basler相机采集图像</title>
    <link href="http://yoursite.com/2016/07/30/%E4%BD%BF%E7%94%A8SDK%E9%A9%B1%E5%8A%A8basler%E7%9B%B8%E6%9C%BA%E9%87%87%E9%9B%86%E5%9B%BE%E5%83%8F/"/>
    <id>http://yoursite.com/2016/07/30/使用SDK驱动basler相机采集图像/</id>
    <published>2016-07-30T07:10:36.000Z</published>
    <updated>2016-07-30T07:26:51.042Z</updated>
    
    <content type="html"><![CDATA[<p>　　basler相机提供USB3.0/GigE/CamerasLink三种连接方式。其中GigE指千兆网卡，CamerasLink是一种标准的相机接口。<br>　　basler的SDK中提供了很多的示例代码及开发用的API文档。下面的代码是在SDK给的代码基础上改的，主要是为了处理GigE连接方式下多机同时采集的情况。<br><a id="more"></a><br>    basler工业相机的驱动安装以及VS环境配置请参考官方文档：<a href="http://www.baslerweb.com/cn/products/software/pylon-windows" target="_blank" rel="external">Window版Pylon</a></p>
<p>上代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 引入相机SDK头文件</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pylon/PylonIncludes.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pylon/PylonGUI.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="comment">// 引入 SDK 命名空间 Pylon</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Pylon;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> GenApi;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Basler_GigECameraParams;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> Pylon::CBaslerGigEInstantCamera Camera_t;</div><div class="line"></div><div class="line"><span class="comment">// 设置需要采集的图像帧数</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">uint32_t</span> c_countOfImagesToGrab = <span class="number">10</span>;</div><div class="line"><span class="comment">// 设置最大的需要连接的相机个数</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">size_t</span> c_maxCamerasToUse = <span class="number">2</span>;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;Camera_t *&gt; cameras;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">startGrabbing</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">size_t</span> i=<span class="number">0</span>; i&lt;cameras.size(); ++i)</div><div class="line">	&#123;</div><div class="line">		cameras[i]-&gt;StartGrabbing();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isGrabbing</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">size_t</span> i=<span class="number">0</span>; i&lt;cameras.size(); ++i)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(!cameras[i]-&gt;IsGrabbing())</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> exitCode = <span class="number">0</span>;</div><div class="line">	<span class="comment">// 初始化pylon运行环境</span></div><div class="line">    PylonInitialize();</div><div class="line"></div><div class="line">    <span class="keyword">try</span></div><div class="line">    &#123;</div><div class="line">        CTlFactory&amp; tlFactory = CTlFactory::GetInstance();</div><div class="line"></div><div class="line">        DeviceInfoList_t devices;　<span class="comment">// 设备信息列表</span></div><div class="line">        <span class="keyword">if</span> ( tlFactory.EnumerateDevices(devices) == <span class="number">0</span> )</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">throw</span> RUNTIME_EXCEPTION( <span class="string">"No camera present."</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 获取在线的相机的设备信息，结果保存在devices中</span></div><div class="line">        <span class="keyword">int</span> camerasCnt = min( devices.size(), c_maxCamerasToUse));</div><div class="line">        <span class="comment">// 获取在线相机个数</span></div><div class="line">        cameras = <span class="built_in">vector</span>&lt;Camera_t *&gt;(camerasCnt);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> ( <span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; camerasCnt; ++i)</div><div class="line">        &#123;</div><div class="line">            cameras[ i ] = <span class="keyword">new</span> Camera_t;</div><div class="line">            <span class="comment">//绑定设备信息</span></div><div class="line">            cameras[i]-&gt;Attach( tlFactory.CreateDevice( devices[ i ]));</div><div class="line">        &#125;</div><div class="line">		<span class="comment">// 相机开始捕获</span></div><div class="line">        startGrabbing();</div><div class="line"></div><div class="line">        CGrabResultPtr ptrGrabResult;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c_countOfImagesToGrab &amp;&amp; isGrabbing(); ++i)</div><div class="line">        &#123;</div><div class="line">	        <span class="keyword">for</span>(<span class="keyword">size_t</span> k=<span class="number">0</span>; k&lt;cameras.size(); k++)</div><div class="line">	        &#123;</div><div class="line">		        cameras[k]-&gt;RetrieveResult( <span class="number">5000</span>, ptrGrabResult, TimeoutHandling_ThrowException);</div><div class="line">		    	<span class="comment">// 相机捕获图像最核心的函数，参数列表中的第三个参数是需要捕获的异常事件，通常是超时异常，第一个参数是超时时间，这里是5000ms。</span></div><div class="line">	       		Pylon::DisplayImage(k, ptrGrabResult);</div><div class="line">	        	<span class="comment">// 显示图像，这里直接用了SDK中的函数。如果需要用到opencv库，可以把ptrGrabResult转换到Mat格式，再调用imshow显示图像。</span></div><div class="line">				<span class="comment">// Mat img = Mat(ptrGrabResult-&gt;GetHeight(), ptrGrabResult-&gt;GetWidth(), CV_8UC1, ptrGrabResult-&gt;GetBuffer());</span></div><div class="line">				<span class="comment">// SDK中也提供了保存图片的方法, 保存png格式图片代码如下：</span></div><div class="line">				CImagePersistence::Save( ImageFileFormat_Png, <span class="string">"GrabbedImage.png"</span>, ptrGrabResult);</div><div class="line">			&#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (<span class="keyword">const</span> GenericException &amp;e)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cerr</span> &lt;&lt; <span class="string">"An exception occurred."</span> &lt;&lt; <span class="built_in">endl</span></div><div class="line">	        &lt;&lt; e.GetDescription() &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        exitCode = <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"Press Enter to exit."</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span>.get() != <span class="string">'\n'</span>);</div><div class="line">	<span class="comment">// 调用SDK结束, 释放所有pylon资源</span></div><div class="line">    PylonTerminate(); </div><div class="line"></div><div class="line">    <span class="keyword">return</span> exitCode;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　basler相机提供USB3.0/GigE/CamerasLink三种连接方式。其中GigE指千兆网卡，CamerasLink是一种标准的相机接口。&lt;br&gt;　　basler的SDK中提供了很多的示例代码及开发用的API文档。下面的代码是在SDK给的代码基础上改的，主要是为了处理GigE连接方式下多机同时采集的情况。&lt;br&gt;
    
    </summary>
    
      <category term="项目开发" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="balser" scheme="http://yoursite.com/tags/balser/"/>
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++读取目录下所用文件</title>
    <link href="http://yoursite.com/2016/07/29/C-%E8%AF%BB%E5%8F%96%E7%9B%AE%E5%BD%95%E4%B8%8B%E6%89%80%E7%94%A8%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2016/07/29/C-读取目录下所用文件/</id>
    <published>2016-07-29T10:40:03.000Z</published>
    <updated>2016-07-29T10:55:53.543Z</updated>
    
    <content type="html"><![CDATA[<p>　　编程处理数据的时候，经常会遇到需要从文件夹下读取所有文件的情况。这个在python和matlab等语言中比较容易实现，但在C语言中会相对麻烦些。作为一个小的功能模块，做个总结，方便大家学习使用。<br><a id="more"></a></p>
<p>上代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">用到的头文件是 #include &lt;io.h&gt;</div><div class="line">函数参数：</div><div class="line">    path 需要读取的目录路径（如：D:\\imgs）	    </div><div class="line">    suffix 需要读取的文件类型（如：png）</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">listFile</span><span class="params">(<span class="built_in">string</span> path, <span class="built_in">string</span> suffix)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">string</span> filepath = path + <span class="string">"/*."</span> + suffix;</div><div class="line">    <span class="keyword">_finddata_t</span> fileinfo; <span class="comment">//文件记录结构</span></div><div class="line">    <span class="keyword">long</span> handle = <span class="number">0</span>; <span class="comment">//文件句柄</span></div><div class="line">    <span class="keyword">if</span>((handle = <span class="number">_f</span>indfirst(filepath.c_str(),&amp;fileinfo)) == <span class="number">-1</span>L)</div><div class="line">    &#123;</div><div class="line">		<span class="comment">//用 _findfirst 函数获取句柄，返回-1时，表示获取失败。</span></div><div class="line">	    <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">do</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(fileinfo.attrib &amp; <span class="number">_</span>A_SUBDIR) <span class="comment">//比较文件类型是否是文件夹</span></div><div class="line">        &#123;</div><div class="line">	        <span class="comment">//子目录</span></div><div class="line">            <span class="keyword">if</span>(<span class="built_in">strcmp</span>(fileinfo.name,<span class="string">"."</span>)!=<span class="number">0</span> &amp;&amp; <span class="built_in">strcmp</span>(fileinfo.name,<span class="string">".."</span>)!=<span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="comment">//递归遍历子目录</span></div><div class="line">                listFile(path+<span class="string">"\\"</span>+fileinfo.name, suffix);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;path+<span class="string">"\\"</span>+fileinfo.name&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">while</span>(<span class="number">_f</span>indnext(handle,&amp;fileinfo)==<span class="number">0</span>);</div><div class="line">    <span class="comment">// 用 _findnext 函数遍历下一个文件，成功时返回0， 失败时返回-1</span></div><div class="line">    <span class="number">_f</span>indclose(handle);</div><div class="line">    <span class="comment">// 用 _findclose 函数关闭句柄</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　这个程序的功能是打印目录下特定类型的所有文件名称，大家可以根据这个代码的框架，具体到实际情况中，做修改使用。用到的文件结构 <a href="http://baike.baidu.com/link?url=D-Yd-B-iIbTQZNscOX6LkABtnX24ZgbwI-A8DRIqPB4DcxdVGC3KpA8w0gjH3j0agalY5SAnHyIqMJwazckNgK" target="_blank" rel="external">_finddata_t</a> 和函数 _findfirst ,  <a href="http://baike.baidu.com/link?url=GoFVR5Z_Zoop-1oQUgfIrE0F3-cxiTsjl8BUXhmahWerbQrGzee26WwMt4WAstL116Ceetd4WMpd9MCeGchuxK" target="_blank" rel="external">_findnext</a> , _findclose ，可以自行百度了解。<br>　　需要强调一点的是：程序里句柄 handle 的返回类型用了 long 类型，但需要注意的是如果编64位程序时，句柄的返回类型最好换成 intptr_t 类型。不然会出现因类型转换出现数据丢失而造成指针异常的问题。这个问题在VS2010基本不会出现，但用高版本的VS时必须注意。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　编程处理数据的时候，经常会遇到需要从文件夹下读取所有文件的情况。这个在python和matlab等语言中比较容易实现，但在C语言中会相对麻烦些。作为一个小的功能模块，做个总结，方便大家学习使用。&lt;br&gt;
    
    </summary>
    
      <category term="C++" scheme="http://yoursite.com/categories/C/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/07/28/hello-world/"/>
    <id>http://yoursite.com/2016/07/28/hello-world/</id>
    <published>2016-07-28T02:13:30.174Z</published>
    <updated>2016-07-29T07:40:35.041Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
      <category term="杂文" scheme="http://yoursite.com/categories/%E6%9D%82%E6%96%87/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
